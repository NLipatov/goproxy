networks:
  default:
    name: goproxy
    driver: bridge

services:
  # DBs
  proxy-cockroach:
    image: cockroachdb/cockroach:v24.3.5
    container_name: proxy-cockroach
    hostname: proxy-cockroach
    command: >
      start-single-node
      --advertise-addr=proxy-cockroach:26357
      --http-addr=proxy-cockroach:8080
      --listen-addr=localhost:26257
      --sql-addr=proxy-cockroach:26257
      --insecure
    ports:
      - "26257:26257"
      - "8080:8080"
    volumes:
      - proxy-cockroach-data:/cockroach/cockroach-data
    healthcheck:
      test: ["CMD-SHELL", "cockroach node status --insecure --host=proxy-cockroach:26257"]
      interval: 1s
      timeout: 5s
      retries: 5
        
  plans-cockroach:
    image: cockroachdb/cockroach:v24.3.5
    container_name: plans-cockroach
    hostname: plans-cockroach
    command: >
      start-single-node
      --advertise-addr=plans-cockroach:26357
      --http-addr=plans-cockroach:8080
      --listen-addr=localhost:26257
      --sql-addr=plans-cockroach:26257
      --insecure
    ports:
      - "26258:26257"
      - "8081:8080"
    volumes:
      - plans-cockroach-data:/cockroach/cockroach-data
    healthcheck:
      test: ["CMD-SHELL", "cockroach node status --insecure --host=plans-cockroach:26257"]
      interval: 1s
      timeout: 5s
      retries: 5
  
  billing-cockroach:
    image: cockroachdb/cockroach:v24.3.5
    container_name: billing-cockroach
    hostname: billing-cockroach
    command: >
      start-single-node
      --advertise-addr=billing-cockroach:26357
      --http-addr=billing-cockroach:8080
      --listen-addr=localhost:26257
      --sql-addr=billing-cockroach:26257
      --insecure
    ports:
      - "26259:26257"
      - "8082:8080"
    volumes:
      - billing-cockroach-data:/cockroach/cockroach-data
    healthcheck:
      test: ["CMD-SHELL", "cockroach node status --insecure --host=billing-cockroach:26257"]
      interval: 1s
      timeout: 5s
      retries: 5
  
  # DB migrators
  proxy-cockroach-migrator:
    build:
      context: ./src
    container_name: proxy-cockroach-migrator
    environment:
      - MODE=migrator
      - DB_DATABASE=${DB_DATABASE}
      - DB_USER=${DB_USER}
      - DB_PASS=${DB_PASS}
      - DB_HOST=${DB_HOST}
      - DB_PORT=${DB_PORT}
    depends_on:
      proxy-cockroach:
        condition: service_healthy

  plans-cockroach-migrator:
    build:
      context: ./src
    container_name: plans-cockroach-migrator
    environment:
      - MODE=migrator
      - DB_DATABASE=${PLANS_DB_DATABASE}
      - DB_USER=${PLANS_DB_USER}
      - DB_PASS=${PLANS_DB_PASS}
      - DB_HOST=${PLANS_DB_HOST}
      - DB_PORT=${PLANS_DB_PORT}
    depends_on:
      plans-cockroach:
        condition: service_healthy

  billing-cockroach-migrator:
    build:
      context: ./src
    container_name: billing-cockroach-migrator
    environment:
      - MODE=migrator
      - DB_DATABASE=${BILLING_DB_DATABASE}
      - DB_USER=${BILLING_DB_USER}
      - DB_PASS=${BILLING_DB_PASS}
      - DB_HOST=${BILLING_DB_HOST}
      - DB_PORT=${BILLING_DB_PORT}
    depends_on:
      billing-cockroach:
        condition: service_healthy
  
  # Services
  google-auth-api:
    build:
      context: ./src
    container_name: google-auth-api
    ports:
      - "3030:3030"
    environment:
      - MODE=google-auth
      - SERVE_PORT=3030
      - ALLOWED_ORIGINS=${UI_BASE_URL}
      - DB_DATABASE=${DB_DATABASE}
      - DB_USER=${DB_USER}
      - DB_PASS=${DB_PASS}
      - DB_HOST=${DB_HOST}
      - DB_PORT=${DB_PORT}
      - ENVIRONMENT=development
      - GOOGLE_AUTH_CLIENT_ID=${GOOGLE_AUTH_CLIENT_ID}
      - GOOGLE_AUTH_CLIENT_SECRET=${GOOGLE_AUTH_CLIENT_SECRET}
      - GOOGLE_AUTH_HOST=${GOOGLE_AUTH_HOST}
      - GOOGLE_AUTH_PORT=${GOOGLE_AUTH_PORT}
      - PROXY_KAFKA_AUTO_OFFSET_RESET=${PROXY_KAFKA_AUTO_OFFSET_RESET}
      - PROXY_KAFKA_BOOTSTRAP_SERVERS=kafka:9092
      - PROXY_KAFKA_GROUP_ID=GOOGLE-AUTH
      - PROXY_KAFKA_TOPIC=PROXY
      - TC_CACHE_HOST=${TC_CACHE_HOST}
      - TC_CACHE_PORT=${TC_CACHE_PORT}
      - TC_CACHE_USER=${TC_CACHE_USER}
    depends_on:
      proxy-cockroach:
        condition: service_healthy
      plan-controller-cache:
        condition: service_healthy
        
  proxy:
    build:
      context: ./src
    container_name: proxy
    ports:
      - "8888:8888"
    environment:
      - MODE=proxy
      - DB_DATABASE=${DB_DATABASE}
      - DB_USER=${DB_USER}
      - DB_PASS=${DB_PASS}
      - DB_HOST=${DB_HOST}
      - DB_PORT=${DB_PORT}
      - HTTP_LISTENER_PORT=8888
      - PROXY_KAFKA_TOPIC=${PROXY_KAFKA_TOPIC}
      - PROXY_KAFKA_AUTO_OFFSET_RESET=earliest
      - PROXY_KAFKA_GROUP_ID=traffic-processor
      - PROXY_KAFKA_BOOTSTRAP_SERVERS=kafka:9092
      - PROXY_KAFKA_TOPIC=${PROXY_KAFKA_TOPIC}
      - TC_CACHE_HOST=${TC_CACHE_HOST}
      - TC_CACHE_PORT=${TC_CACHE_PORT}
      - TC_CACHE_USER=${TC_CACHE_USER}
      - TC_CACHE_PASSWORD=${TC_CACHE_PASSWORD}
    depends_on:
      init-kafka-topics:
          condition: service_completed_successfully
      proxy-cockroach-migrator:
        condition: service_completed_successfully

  rest-api:
    build:
      context: ./src
    container_name: rest-api
    ports:
      - "80:80"
    environment:
      - MODE=rest-api
      - DB_DATABASE=${DB_DATABASE}
      - DB_USER=${DB_USER}
      - DB_PASS=${DB_PASS}
      - DB_HOST=${DB_HOST}
      - DB_PORT=${DB_PORT}
      - HTTP_REST_API_PORT=80
      - PROXY_KAFKA_BOOTSTRAP_SERVERS=kafka:9092
      - PROXY_KAFKA_GROUP_ID=${USERS_REST_API_KAFKA_GROUP_ID}
      - PROXY_KAFKA_AUTO_OFFSET_RESET=${PROXY_KAFKA_AUTO_OFFSET_RESET}
      - PROXY_KAFKA_TOPIC=${USERS_REST_API_KAFKA_TOPIC} 
      - ALLOWED_ORIGINS=*
    depends_on:
      - proxy-cockroach-migrator

  zookeeper:
    image: confluentinc/cp-zookeeper:7.8.0
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    container_name: zookeeper
    ports:
      - "2181:2181"

  kafka:
    image: confluentinc/cp-kafka:7.8.0
    depends_on:
      - zookeeper
    container_name: kafka
    ports:
      - "9092:9092"
      - "9093:9093"
    environment:
      KAFKA_BROKER_ID: -1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:9093
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    healthcheck:
      test: ["CMD", "kafka-broker-api-versions", "--bootstrap-server", "kafka:9092"]
      interval: 10s
      timeout: 5s
      retries: 5

  init-kafka-topics:
    image: confluentinc/cp-kafka:7.8.0
    depends_on:
      kafka:
        condition: service_healthy
    entrypoint: [ '/bin/sh', '-c' ]
    command: |
      "
      # blocks until kafka is reachable
      kafka-topics --bootstrap-server kafka:9092 --list

      echo -e 'Creating kafka topics'
      kafka-topics --bootstrap-server kafka:9092 --create --if-not-exists --topic PROXY --replication-factor 1 --partitions 1
      kafka-topics --bootstrap-server kafka:9092 --create --if-not-exists --topic PLAN --replication-factor 1 --partitions 1
      kafka-topics --bootstrap-server kafka:9092 --create --if-not-exists --topic BILLING --replication-factor 1 --partitions 1

      echo -e 'Successfully created the following topics:'
      kafka-topics --bootstrap-server kafka:9092 --list
      
      exit 0
      "

  kafka-relay:
    build:
      context: ./src
    container_name: kafka-relay
    environment:
      - MODE=kafka-relay
      - DB_DATABASE=${DB_DATABASE}
      - DB_USER=${DB_USER}
      - DB_PASS=${DB_PASS}
      - DB_HOST=${DB_HOST}
      - DB_PORT=${DB_PORT}
    depends_on:
      - kafka

  plan-controller-cache:
    image: valkey/valkey:8.0-bookworm
    container_name: plan-controller-cache
    ports:
      - "6379:6379"
    volumes:
      - plan-controller-cache-data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 5s
    
  billing-cache:
      image: valkey/valkey:8.0-bookworm
      container_name: billing-cache
      ports:
        - "6380:6379"
      volumes:
        - billing-cache-data:/data
      healthcheck:
        test: ["CMD", "redis-cli", "ping"]
        interval: 30s
        timeout: 5s
        retries: 3
        start_period: 5s
        
  billing-api:
    build:
      context: ./src
    container_name: billing-api
    ports:
      - "4040:4040"
    environment:
      - MODE=billing-api
      - HTTP_PORT=4040
      - ALLOWED_ORIGINS=${UI_BASE_URL}
      - DB_DATABASE=${BILLING_DB_DATABASE}
      - DB_HOST=${BILLING_DB_HOST}
      - DB_PASS=${BILLING_DB_PASS}
      - DB_PORT=${BILLING_DB_PORT}
      - DB_USER=${BILLING_DB_USER}
      - TC_CACHE_HOST=${BILLING_CACHE_HOST}
      - TC_CACHE_PORT=${BILLING_CACHE_PORT}
      - TC_CACHE_USER=${BILLING_CACHE_USER}
    depends_on:
      init-kafka-topics:
        condition: service_completed_successfully
      billing-cockroach:
        condition: service_healthy
      kafka:
        condition: service_healthy
      billing-cache:
        condition: service_healthy
        
  plans-api:
    build:
      context: ./src
    container_name: plans-api
    ports:
      - "9090:9090"
    environment:
      - MODE=plans-api
      - HTTP_PORT=9090
      - ALLOWED_ORIGINS=${UI_BASE_URL}
      - DB_DATABASE=${PLANS_DB_DATABASE}
      - DB_HOST=${PLANS_DB_HOST}
      - DB_PASS=${PLANS_DB_PASS}
      - DB_PORT=${PLANS_DB_PORT}
      - DB_USER=${PLANS_DB_USER}
      - TC_CACHE_HOST=${TC_CACHE_HOST}
      - TC_CACHE_PORT=${TC_CACHE_PORT}
      - TC_CACHE_USER=${TC_CACHE_USER}
    depends_on:
      init-kafka-topics:
        condition: service_completed_successfully
      kafka:
        condition: service_healthy
      plan-controller-cache:
        condition: service_healthy
        
  crypto-cloud-billing-api:
    build:
      context: ./src
    container_name: crypto-cloud-billing-api
    ports:
      - "2020:2020"
    environment:
      - MODE=crypto-cloud-billing-api
      - HTTP_PORT=2020
      - DB_USER=${BILLING_DB_USER}
      - DB_PASS=${BILLING_DB_PASS}
      - DB_DATABASE=${BILLING_DB_DATABASE}
      - DB_HOST=${BILLING_DB_HOST}
      - DB_PORT=${BILLING_DB_PORT}
      - TC_CACHE_HOST=${BILLING_CACHE_HOST}
      - TC_CACHE_PORT=${BILLING_CACHE_PORT}
      - TC_CACHE_USER=${BILLING_CACHE_USER}
      - TC_CACHE_PASSWORD=${BILLING_CACHE_PASSWORD}
      - ALLOWED_ORIGINS=${CC_BILLING_ALLOWED_ORIGINS}
      - BILLING_KAFKA_AUTO_OFFSET_RESET=${CC_BILLING_KAFKA_AUTO_OFFSET_RESET}
      - BILLING_KAFKA_BOOTSTRAP_SERVERS=${CC_BILLING_KAFKA_BOOTSTRAP_SERVERS}
      - BILLING_KAFKA_GROUP_ID=${CC_BILLING_KAFKA_GROUP_ID}
      - BILLING_KAFKA_TOPIC=${CC_BILLING_KAFKA_TOPIC}
      - API_KEY=${CC_BILLING_API_KEY}
      - SECRET_KEY=${CC_BILLING_SECRET_KEY}
      - SHOP_ID=${CC_BILLING_SHOP_ID}
    depends_on:
      init-kafka-topics:
        condition: service_completed_successfully
      kafka:
        condition: service_healthy
      plan-controller-cache:
        condition: service_healthy
    
  free-plan-billing-api:
      build:
        context: ./src
      container_name: free-plan-billing-api
      ports:
        - "2021:2021"
      environment:
        - MODE=free-plan-billing-api
        - HTTP_PORT=2021
        - DB_USER=${BILLING_DB_USER}
        - DB_PASS=${BILLING_DB_PASS}
        - DB_DATABASE=${BILLING_DB_DATABASE}
        - DB_HOST=${BILLING_DB_HOST}
        - DB_PORT=${BILLING_DB_PORT}
        - TC_CACHE_HOST=${BILLING_CACHE_HOST}
        - TC_CACHE_PORT=${BILLING_CACHE_PORT}
        - TC_CACHE_USER=${BILLING_CACHE_USER}
        - TC_CACHE_PASSWORD=${BILLING_CACHE_PASSWORD}
        - ALLOWED_ORIGINS=${CC_BILLING_ALLOWED_ORIGINS}
        - BILLING_KAFKA_AUTO_OFFSET_RESET=${CC_BILLING_KAFKA_AUTO_OFFSET_RESET}
        - BILLING_KAFKA_BOOTSTRAP_SERVERS=${CC_BILLING_KAFKA_BOOTSTRAP_SERVERS}
        - BILLING_KAFKA_GROUP_ID=${CC_BILLING_KAFKA_GROUP_ID}
        - BILLING_KAFKA_TOPIC=${CC_BILLING_KAFKA_TOPIC}
      depends_on:
        init-kafka-topics:
          condition: service_completed_successfully
        kafka:
          condition: service_healthy
        plan-controller-cache:
          condition: service_healthy

  plan-controller:
    build:
      context: ./src
    container_name: plan-controller
    ports:
      - "3031:3031"
    environment:
      - MODE=plan-controller
      - USERS_API_HOST=http://rest-api:80
      - DB_USER=${PLANS_DB_USER}
      - DB_PASS=${PLANS_DB_PASS}
      - DB_HOST=${PLANS_DB_HOST}
      - DB_PORT=${PLANS_DB_PORT}
      - DB_DATABASE=${PLANS_DB_DATABASE}
      - PROXY_KAFKA_TOPIC=${PROXY_KAFKA_TOPIC}
      - PLAN_KAFKA_TOPIC=${PLAN_KAFKA_TOPIC}
      - PLAN_KAFKA_AUTO_OFFSET_RESET=earliest
      - PLAN_KAFKA_GROUP_ID=traffic-processor
      - PLAN_KAFKA_BOOTSTRAP_SERVERS=kafka:9092
      - PROXY_KAFKA_BOOTSTRAP_SERVERS=kafka:9092
      - PROXY_KAFKA_GROUP_ID=${PROXY_KAFKA_GROUP_ID}
      - PROXY_KAFKA_AUTO_OFFSET_RESET=${PROXY_KAFKA_AUTO_OFFSET_RESET}
      - TC_CACHE_HOST=${TC_CACHE_HOST}
      - TC_CACHE_PORT=${TC_CACHE_PORT}
      - TC_CACHE_USER=${TC_CACHE_USER}
      - TC_CACHE_PASSWORD=${TC_CACHE_PASSWORD}
      - ALLOWED_ORIGINS=${UI_BASE_URL}
    depends_on:
      init-kafka-topics:
        condition: service_completed_successfully
      plans-cockroach:
        condition: service_healthy
      kafka:
        condition: service_healthy
      plan-controller-cache:
        condition: service_healthy

volumes:
  plan-controller-cache-data:
  billing-cache-data: 
  proxy-cockroach-data: 
  plans-cockroach-data:
  billing-cockroach-data:
